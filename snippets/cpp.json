{
  "for": {
    "prefix": "for",
    "body": [
      "for(${1:size_t} ${2:i} = ${3:0}; $2 < ${4:length}; $2++) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for 'for' loop"
  },
  "forr": {
    "prefix": "forr",
    "body": [
      "for(${1:size_t} ${2:i} = ${3:length} - 1; $2 >= ${4:0}; $2--) {",
      "\t$0",
      "}"
    ],
    "description": "Code snippet for reverse 'for' loop"
  },
  "do": {
    "prefix": "do",
    "body": ["do", "{", "\t$0", "} while($1);"],
    "description": "Code snippet for do...while loop"
  },
  "while": {
    "prefix": "while",
    "body": ["while($1) {", "\t$2", "}"],
    "description": ""
  },
  "foreach": {
    "prefix": "foreach",
    "body": ["for(${1:auto} ${2:var} : ${3:collection_to_loop}) {", "\t$0", "}"],
    "description": "Code snippet for range-based for loop (c++11) statement"
  },
  "if": {
    "prefix": "if",
    "body": ["if($1) {", "\t$0", "}"],
    "description": "Code snippet for if statement"
  },
  "else": {
    "prefix": "else",
    "body": ["else {", "\t$0", "}"],
    "description": "Code snippet for else statement"
  },
  "else if": {
    "prefix": "else if",
    "body": ["else if($1) {", "\t$0", "}"],
    "description": "Code snippet for else-if statement"
  },
  "enum": {
    "prefix": "enum",
    "body": ["enum ${1:MyEnum} {", "\t$0", "};"],
    "description": "Code snippet for enum"
  },
  "enum class": {
    "prefix": "enum class",
    "body": ["enum class ${1:MyClass} {$0};"],
    "description": "Code snippet for enum class (c++11)"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1();",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1();",
      "",
      "private:",
      "\t$2",
      "};",
      "",
      "$1::$1()",
      "{",
      "}",
      "",
      "$1::~$1()",
      "{",
      "}"
    ],
    "description": "Code snippet for class"
  },
  "eclass": {
    "prefix": "eclass",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$2",
      "private:",
      "\t$3",
      "};",
      ""
    ],
    "description": "Code snippet for empty class"
  },
  "qclass": {
    "prefix": "qclass",
    "body": [
      "class ${1:MyClass} : public QObject",
      "{",
      "\tQ_OBJECT;",
      "public:",
      "\nexplicit $1(QObject *parent = nullptr);",
      "\t$2",
      "signals:",
      "",
      "public slots:",
      "};",
      ""
    ],
    "description": "Code snippet for empty Qt class"
  },
  "classi": {
    "prefix": "classi",
    "body": [
      "class ${1:MyClass}",
      "{",
      "public:",
      "\t$1() = default;",
      "\t$1($1 &&) = default;",
      "\t$1(const $1 &) = default;",
      "\t$1 &operator=($1 &&) = default;",
      "\t$1 &operator=(const $1 &) = default;",
      "\t~$1() = default;",
      "",
      "private:",
      "\t$2",
      "};"
    ],
    "description": "Code snippet for class with inline constructor/destructor"
  },
  "interface": {
    "prefix": "interface",
    "body": ["__interface I${1:Interface}", "{", "\t$0", "};"],
    "description": "Code snippet for interface (Visual C++)"
  },
  "namespace": {
    "prefix": "namespace",
    "body": ["namespace ${1:MyNamespace}", "{", "\t$0", "}"]
  },
  "#ifdef": {
    "prefix": "#ifdef",
    "body": ["#ifdef ${1:DEBUG}", "$0", "#endif // ${DEBUG}"],
    "description": "Code snippet for #ifdef"
  },
  "#ifndef": {
    "prefix": "#ifndef",
    "body": ["#ifndef ${1:DEBUG}", "$0", "#endif // !$1"],
    "description": "Code snippet for #ifndef"
  },
  "#if": {
    "prefix": "#if",
    "body": ["#if ${1:0}", "$0", "#endif // $1"],
    "description": "Code snippet for #if"
  },
  "struct": {
    "prefix": "struct",
    "body": ["struct ${1:MyStruct}", "{", "\t$0", "};"],
    "description": "Code snippet for struct"
  },
  "switch": {
    "prefix": "switch",
    "body": ["switch (${1:switch_on}) {", "\tdefault:", "\t\t$0", "\t\tbreak;", "}"],
    "description": "Code snippet for switch statement"
  },
  "try": {
    "prefix": "try",
    "body": [
      "try {",
      "\t",
      "}",
      "catch (const std::exception&) {",
      "\t$1",
      "}"
    ],
    "description": "Code snippet for try catch"
  },
  "union": {
    "prefix": "union",
    "body": ["union ${1:MyUnion}", "{", "\t$0", "};"],
    "description": "Code snippet for union"
  },
  "cout": {
    "prefix": "cout",
    "body": ["std::cout << \"${1:message}\" << std::endl;"],
    "description": "Code snippet for printing to std::cout, provided the header is set"
  },
  "cin": {
    "prefix": "cin",
    "body": ["std::cin >> $1;"],
    "description": "Code snippet for std::cin, provided the header is set"
  },
  "printf": {
    "prefix": "printf",
    "body": ["printf(\"$1\\n\"$0);"],
    "description": "Generic printf() snippet"
  },
  "sprintf": {
    "prefix": "sprintf",
    "body": ["sprintf($1, \"$2\\n\"$0);"],
    "description": "Generic sprintf() snippet"
  },
  "fprintf": {
    "prefix": "fprintf",
    "body": ["fprintf(${1:stderr}, \"$2\\n\"$0);"],
    "description": "Generic fprintf() snippet"
  },
  "scanf": {
    "prefix": "scanf",
    "body": ["scanf(\"$1\"$0);"],
    "description": "Generic scanf() snippet"
  },
  "sscanf": {
    "prefix": "sscanf",
    "body": ["sscanf($1, \"$2\"$0);"],
    "description": "Generic sscanf() snippet"
  },
  "fscanf": {
    "prefix": "fscanf",
    "body": ["fscanf($1, \"$2\"$0);"],
    "description": "Generic fscanf() snippet"
  },
  "#inc": {
    "prefix": "#inc",
    "body": ["#include \"$0\""],
    "description": "Code snippet for #include \" \""
  },
  "#inc<": {
    "prefix": "#inc<",
    "body": ["#include <$0>"],
    "description": "Code snippet for #include < >"
  },
  "#def": {
    "prefix": "def",
    "body": ["#define $0"],
    "description": "Code snippet for #define \" \""
  },
  "modar": {
      "prefix": "modar",
      "description": "Code snippet for modular arthmetic",
      "body": [
          "const int MOD = ${1:1e9 + 7};",
          "\t",
          "int mod_add(int a, int b)",
          "{",
          "\ta %= MOD;",
          "\tb %= MOD;",
          "",
          "\treturn (a + b) % MOD;",
          "}",
          "\t",
          "int mod_mul(int a, int b)",
          "{",
          "\ta %= MOD;",
          "\tb %= MOD;",
          "\t",
          "\treturn (a * b) % MOD;",
          "}",
          "",
          "int mod_sub(int a, int b)",
          "{",
          "\ta %= MOD;",
          "\tb %= MOD;",
          "\t",
          "\treturn (((a - b) % MOD) + MOD) % MOD;",
          "}"
      ]
  },
  "sieve": {
      "prefix" :"sieve",
      "description": "Code snippet for sieve of erathostenes",
      "body": [
          "const int MXS = ${1:1e5};",
          "bool is_prime[MXS];",
          "\t",
          "void sieve()",
          "{",
          "\tmemset(is_prime, true, sizeof is_prime);",
          "\t",
          "\tfor(int p = 2; p * p <= MXS; ++p) {",
          "\t\tif(is_prime[p]) {",
          "\t\t\tfor(int i = p * p; i <= MXS; i += p) {",
          "\t\t\t\tis_prime[i] = false;",
          "\t\t\t}",
          "\t\t}",
          "\t}",
          "}"
      ]
  },
  "fact": {
      "prefix" :"fact",
      "description": "Code snippet for logn factorization",
      "body": [
         "const int MXSPF = ${1:1e5};",
         "\t",
        "int spf[MXSPF];",
        "\t",
        "void sievespf()",
        "{",
        "\tspf[1] = 1;",
        "\t",
        "\tfor(int i = 2; i < MXSPF; ++i) {",
        "\t\tspf[i] = i;",
        "\t}",
        "\t",
        "\tfor(int i = 4; i < MXSPF; i += 2) {",
        "\t\tspf[i] = 2;",
        "\t}",
        "\t",
        "\tfor(int i = 3; i * i < MXSPF; ++i) {",
        "\t\tif(spf[i] == i) {",
        "\t\t\tfor(int j = i * i; j < MXSPF; j += i) {",
        "\t\t\t\tif(spf[j] == j) {",
        "\t\t\t\t\tspf[j] = i;",
        "\t\t\t\t}",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "}",
        "\t",
        "vector<int> factor(int x)",
        "{",
        "\tvector<int> factors;",
        "\twhile(x != 1) {",
        "\t\tfactors.push_back(spf[x]);",
        "\t\tx = x / spf[x];",
        "\t}",
        "\treturn factors;",
        "}"
    ]
  },
  "bfs": {
      "prefix" :"bfs",
      "description": "Code snippet for bfs",
      "body": [
        "void bfs(int st)",
        "{",
        "\tqueue<int> q;",
        "\tq.push(st);",
        "\t",
        "\twhile(!q.empty()) {",
        "\t\tint u = q.front();",
        "\t\tq.pop();",
        "\t",
        "\t\tif(!${1:vis}[u]) {",
        "\t",
        "\t\t\t$1[u] = true;",
        "\t",
        "\t\t\tfor(auto v: ${2:g}[u]) {",
        "\t\t\t\tif(!$1[v]) {",
        "\t\t\t\t\tq.push(v);",
        "\t\t\t\t}",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "}"
    ]
  },
  "unionfind" : {
      "prefix": "unionfind",
      "description": "Code snippet for unionfind",
      "body": [
        "struct unionfind",
        "{",
        "\tvector<int> par, sz;",
        "\t",
        "\tunionfind(int n): par(n), sz(n, 1)",
        "\t{",
        "\t\tiota(par.begin(), par.end(), 0);",
        "\t}",
        "\t",
        "\tint find(int u)",
        "\t{",
        "\t\tif(par[u] == u) {",
        "\t\t\treturn u;",
        "\t\t}",
        "\t\treturn par[u] = find(par[u]);",
        "\t}",
        "\t",
        "\tvoid unite(int u, int v)",
        "\t{",
        "\t\tu = find(u);",
        "\t\tv = find(v);",
        "\t",
        "\t\tif(u == v) {",
        "\t\t\treturn;",
        "\t\t}",
        "\t",
        "\t\tif(sz[u] > sz[v]) {",
        "\t\t\tswap(u, v);",
        "\t\t}",
        "\t",
        "\t\tpar[u] = v;",
        "\t\tsz[v] += sz[u];",
        "\t}",
        "};"

      ]
  },
  "unionfind_partial" : {
      "prefix": "unionfind_partial",
      "description": "Code snippet for unionfind with partial persistence",
      "body": [
        "struct unionfind",
        "{",
        "\tvector<int> par, sz;",
        "\t",
        "\tunionfind(int n): par(n), sz(n, 1)",
        "\t{",
        "\t\tiota(par.begin(), par.end(), 0);",
        "\t}",
        "\t",
        "\tint find(int u)",
        "\t{",
        "\t\tif(par[u] == u) {",
        "\t\t\treturn u;",
        "\t\t}",
        "\t\treturn par[u] = find(par[u]);",
        "\t}",
        "\t",
        "\tvoid unite(int u, int v)",
        "\t{",
        "\t\tu = find(u);",
        "\t\tv = find(v);",
        "\t",
        "\t\tif(u == v) {",
        "\t\t\treturn;",
        "\t\t}",
        "\t",
        "\t\tif(sz[u] > sz[v]) {",
        "\t\t\tswap(u, v);",
        "\t\t}",
        "\t",
        "\t\tpar[u] = v;",
        "\t\tsz[v] += sz[u];",
        "\t}",
        "};"
      ]
  },

  "lca_blifting": {
      "prefix": "lca_blifting",
      "description": "Code snippet for lowest common ancestor with binary lifting",
      "body": [
        "struct lca_blifting",
        "{",
        "\tvector<int> depth;",
        "\tvector<vector<int>> par;",
        "\t",
        "\tint ROOT = 0;",
        "\tconst int MXLOG = 32;",
        "\t",
        "\tvoid dfs(int u, int prev)",
        "\t{",
        "\t\tpar[u][0] = prev;",
        "\t\tfor(int pow = 1; pow < MXLOG; ++pow) {",
        "\t\t\tpar[u][pow] = par[par[u][pow - 1]][pow - 1];",
        "\t\t}",
        "\t",
        "\t\tfor(int v: g[u]) {",
        "\t\t\t// Unvisited",
        "\t\t\tif(depth[v] == -1) {",
        "\t\t\t\tdepth[v] = depth[u] + 1;",
        "\t\t\t\tdfs(v, u);",
        "\t\t\t}",
        "\t\t}",
        "\t}",
        "\t",
        "\tlca_blifting(int n, int root = 0): depth(n, -1), par(n, vector<int>(32, -1)), ROOT{ root }",
        "\t{",
        "\t\tfill(par[ROOT].begin(), par[ROOT].end(), ROOT);",
        "\t\tdepth[ROOT] = 0;",
        "\t",
        "\t\tdfs(ROOT, ROOT);",
        "\t}",
        "\t",
        "\tint get_lca(int u, int v)",
        "\t{",
        "\t\tif(depth[u] > depth[v]) {",
        "\t\t\tswap(u, v);",
        "\t\t}",
        "\t",
        "\t\tint diff = depth[v] - depth[u];",
        "\t",
        "\t\tfor(int mask = 0; mask < MXLOG; ++mask) {",
        "\t\t\tif((diff & (1 << mask)) != 0) {",
        "\t\t\t\tv = par[v][mask];",
        "\t\t\t}",
        "\t\t}",
        "\t",
        "\t\tassert(depth[v] == depth[v]);",
        "\t",
        "\t\tfor(int mask = MXLOG - 1; mask >= 0 && par[u][0] != par[v][0]; --mask) {",
        "\t\t\tint nextu = par[u][mask];",
        "\t\t\tint nextv = par[v][mask];",
        "\t",
        "\t\t\tif(nextu != nextv) {",
        "\t\t\t\tu = nextu;",
        "\t\t\t\tv = nextv;",
        "\t\t\t}",
        "\t\t}",
        "\t",
        "\t\tif(u == v) {",
        "\t\t\treturn u;",
        "\t\t} else {",
        "\t\t\treturn par[u][0];",
        "\t\t}",
        "\t}",
        "};"
      ]
  },

  "segtree" : {
      "prefix": "segtree",
      "description": "Code snippet for segment tree",
      "body": [
        "class seg_tree",
        "{",
        "\tprivate:",
        "\t\tconst int ROOT = 1;",
        "",
        "\t\tint n;",
        "\t\tvector<int> tree;",
        "\t",
        "\t\tint recurse_query(int node, int query_low, int query_high, int node_low, int node_high)",
        "\t\t{",
        "\t\t\t// node is completely inside interval [query_low, query_high]",
        "\t\t\tif(query_low <= node_low && query_high >= node_high) {",
        "\t\t\t\treturn tree[node];",
        "\t\t\t}",
        "\t\t\t// node is completely outside interval [query_low, query_high]",
        "\t\t\tif(query_high < node_low || query_low > node_high) {",
        "\t\t\t\treturn 0;",
        "\t\t\t}",
        "\t",
        "\t\t\tint left = 2 * node, right = 2 * node + 1;",
        "\t",
        "\t\t\tint mid = node_low + (node_high - node_low) / 2;",
        "\t",
        "\t\t\treturn recurse_query(left, query_low, query_high, node_low, mid) + ",
        "\t\t\t\trecurse_query(right, query_low, query_high, mid + 1, node_high);",
        "\t",
        "\t\t}",
        "\t",
        "\tpublic:",
        "\t\tint query(int low, int high)",
        "\t\t{",
        "\t\t\treturn recurse_query(ROOT, low, high, 0, n - 1);",
        "\t\t}",
        "\t",
        "\t\tvoid update(int target_node, int value)",
        "\t\t{",
        "\t\t\t// update the value of a[i] to v",
        "\t\t\ttree[n + target_node] = value;",
        "\t",
        "\t\t\t// iterate through all parents of i and recalculate their values",
        "\t\t\tint par = (n + target_node) / 2;",
        "\t\t\tfor(int node = par; node >= ROOT; node /= 2) {",
        "\t\t\t\tint left = 2 * node, right = 2 * node + 1;",
        "\t",
        "\t\t\t\ttree[node] = tree[left] + tree[right];",
        "\t\t\t}",
        "\t\t}",
        "\t",
        "\t\tvoid build(vector<int> arr)",
        "\t\t{",
        "\t\t\tn = arr.size();",
        "\t\t\t// pad a[i] with 0's to make it's size a power of 2",
        "\t\t\twhile(__builtin_popcount(n) != 1) {",
        "\t\t\t\tarr.push_back(0);",
        "\t\t\t\tn++;",
        "\t\t\t}",
        "\t",
        "\t\t\t// tree size is twice the size of the array",
        "\t\t\ttree.resize(2 * n);",
        "\t",
        "\t\t\t// fill in leaf nodes",
        "\t\t\tfor(int i = 0; i < n; ++i) {",
        "\t\t\t\ttree[n + i] = arr[i];",
        "\t\t\t}",
        "\t",
        "\t\t\t// Fill in remaining nodes from bottom up",
        "\t\t\tfor(int node = n - 1; node >= ROOT; --node) {",
        "\t\t\t\tint left = 2 * node, right = 2 * node + 1;",
        "\t",
        "\t\t\t\t// A node is the sum of two children",
        "\t\t\t\ttree[node] = tree[left] + tree[right];",
        "\t\t\t}",
        "\t\t}",
        "\t",
        "\t\tseg_tree(vector<int> arr)",
        "\t\t{",
        "\t\t\tbuild(arr);",
        "\t\t}",
        "\t",
        "\t\tseg_tree(int n)",
        "\t\t{",
        "\t\t\twhile(__builtin_popcount(n) != 1) {",
        "\t\t\t\tn++;",
        "\t\t\t}",
        "\t",
        "\t\t\ttree.resize(2 * n, 0);",
        "\t\t\tthis->n = n;",
        "\t\t}",
        "};"
      ]
  },
  "Main function template": {
      "prefix": "main",
      "body": [
          "int main(int argc, char *argv[])",
          "{",
              "\t$1",
              "\treturn 0;",
              "}"
      ],
      "description": "A standard main function for a C++ program"
  }
}
